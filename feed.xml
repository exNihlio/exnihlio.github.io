<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-12-27T12:19:37-07:00</updated><id>/feed.xml</id><title type="html">Burning Servers</title><subtitle>A blog about Linux, virtualization, coding and technology</subtitle><entry><title type="html">Deeper into KVM</title><link href="/linux/virtualization/2017/10/29/deeper-kvm-qemu.html" rel="alternate" type="text/html" title="Deeper into KVM" /><published>2017-10-29T00:00:00-06:00</published><updated>2017-10-29T00:00:00-06:00</updated><id>/linux/virtualization/2017/10/29/deeper-kvm-qemu</id><content type="html" xml:base="/linux/virtualization/2017/10/29/deeper-kvm-qemu.html">&lt;p&gt;Having covered the basics of standing up a simple VM, this guide will cover some of the more in depth aspects, quirks, and potential landmines that come from using KVM.&lt;/p&gt;

&lt;p&gt;Part I: Disks&lt;/p&gt;

&lt;p&gt;Creating Disks:&lt;/p&gt;

&lt;p&gt;By default, when installing a VM and guest operating system, libvirt can automatically provision a disk, as demonstrated in the previous post. Libvirt can also use previously provisioned disks. qemu-img is the most commonly used utility for creating disks with KVM.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;qemu-img&lt;/code&gt; is a highly flexible tool for creating virtual disks of varying types, most commonly qcow2 or raw images, but it also has support for several others including VMDK disks for VMWare and legacy qcow images.&lt;/p&gt;

&lt;p&gt;To create a virtual disk with qemu-img, invoke the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost ~ ]$ qemu-img create -f qcow2 example_disk.qcow2 20G&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates a virtual disks with the name ‘example_disk’, formatted as a qcow2 image, of the size 20GB. If you examine the size of the file:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost ~ ]$ ls -alh example_disk.qcow2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We get the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-rw-r--r--. 1 root root 193K Oct 29 22:21 example_disk.qcow2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Qcow2 disks are thin-provisioned by qemu-img . Essentially, the disk will expand as data is allocated to it (such as OS installation or file storage), until it occupies 20GB of actual space. This is useful in some cases, such as over-provisioning a physical disk.&lt;/p&gt;

&lt;p&gt;Be aware, if you attach this disk to a VM, it will not see the disk as 20GB in size. For storage virtual disks, it is frequently better to use raw formatting.&lt;/p&gt;

&lt;p&gt;The procedure to create a raw image is the same as above, simply sub out ‘qcow2 with ‘raw’.&lt;/p&gt;

&lt;p&gt;Raw disks have the advantage of greater simplicity and portability while qcow2 disks supported advanced features including encryption and snapshots.&lt;/p&gt;

&lt;p&gt;If you wish to use qcow2 formatted disk for a VM, it becomes necessary to pre-provision disk with qemu-img . Create your disk as specified above, then include the disk path as part of the –disk flag when installing with virt-install.
Adding and Removing Disks:&lt;/p&gt;

&lt;p&gt;At some point, it will become necessary to add or remove storage from a virtual machine. Attaching and detaching disks is accomplished with the detach-disk and attach-disk utilities from virsh.&lt;/p&gt;

&lt;p&gt;To add a new virtual disk accomplish these steps:&lt;/p&gt;

&lt;p&gt;Create a new virtual disk, as described above.&lt;/p&gt;

&lt;p&gt;Execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost ~ ]$ virsh attach-disk example_vm /path/to/disk/example_disk.img vdb --live --config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This attaches the disk ‘example_disk.img’ to the VM ‘example_vm’ as the virtual device ‘vdb’. When listed with the lsblk command, there will now be two virtual disks: /dev/vda which the os was installed on and /dev/vdb . This disk can be treated exactly as any other type of directly attached storage; it can formatted, partitioned or added to a RAID group.&lt;/p&gt;

&lt;p&gt;There are several critical details to note here.&lt;/p&gt;

&lt;p&gt;First, always use the absolute path to the disk.&lt;/p&gt;

&lt;p&gt;Second, make sure that the target matches the target in the operating system. For example if you attached the disk as /dev/vdc but only on other virtual disk was attached in the OS, then the disk would still appear in the OS /dev/vdb. But the VM configuration would reflect /dev/vdc. This can make troubleshooting disk problems difficult.&lt;/p&gt;

&lt;p&gt;Third, note the flags used. &lt;code class=&quot;highlighter-rouge&quot;&gt;--live&lt;/code&gt; immediately attaches the disk, &lt;code class=&quot;highlighter-rouge&quot;&gt;--config&lt;/code&gt; makes adds the disk to VM XML configuration.&lt;/p&gt;

&lt;p&gt;Next, removing disks:&lt;/p&gt;

&lt;p&gt;Before removing a disk, accomplish these steps:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ensure no critical applications are running, or services are accessing the disk.
Dismount the disk: umount /path/to/disk
Remove the disk entry from /etc/fstab or autofs. Rebooting with a dead entry to a disk can cause the OS to hang.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Detach the disk:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost ~ ]$ virsh detach-disk example_vm vdb --live --config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will immediately detach the disk and remove it from the VM XML config.&lt;/p&gt;

&lt;p&gt;Summary:&lt;/p&gt;

&lt;p&gt;Disks are created with qemu-img utility. Qcow2 disks are thin provisioned and have advanced features including snapshots, while raw disks are highly portable and simpler.  Attach disks with virsh attach-disks and detach disks with virsh detach-disks. Always ensure that the attached disk target matches the VM’s target.&lt;/p&gt;</content><author><name></name></author><summary type="html">Having covered the basics of standing up a simple VM, this guide will cover some of the more in depth aspects, quirks, and potential landmines that come from using KVM.</summary></entry><entry><title type="html">Intro to KVM/QEMU and libvirt - Part 2</title><link href="/2017/10/27/kvm-qemu-intro-pt2.html" rel="alternate" type="text/html" title="Intro to KVM/QEMU and libvirt - Part 2" /><published>2017-10-27T00:00:00-06:00</published><updated>2017-10-27T00:00:00-06:00</updated><id>/2017/10/27/kvm-qemu-intro-pt2</id><content type="html" xml:base="/2017/10/27/kvm-qemu-intro-pt2.html">&lt;h2 id=&quot;installation-and-creation-of-a-vm&quot;&gt;Installation and creation of a VM&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Installation:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This guide assumes you are using a Red Hat Enterprise Linux 7.3+ or CentOS 7.3+ system.&lt;/p&gt;

&lt;p&gt;A 64bit CPU (AMD64/x86_64) is generally required for a virtualization host, but this should only be a problem on very old CPUs.&lt;/p&gt;

&lt;p&gt;The CPU also requires the Intel or AMD virtualization extensions, VT-d in the case of Intel CPUs or AMD-V for AMD CPUs. To see if your CPU is virtualization capable, run the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost - $]$ cat /proc/cpuinfo | egrep &quot;vmx|svm|lm&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The lm value indicates that the CPU is virtualization capable. vmx are the Intel virtualization extensions and svm are the AMD virtualization extension.&lt;/p&gt;

&lt;p&gt;If your system returns vmx or svm , and lm, your system is ready to be a virtualization host.&lt;/p&gt;

&lt;p&gt;Make sure you have enabled virtualization inside the BIOS/UEFI as well. This is usually under advanced options. Check your motherboard documentation.&lt;/p&gt;

&lt;p&gt;You will need the following packages installed, as well as their dependencies:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libvirt&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;qemu-img&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;qemu-kvm&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;virt-install&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;virt-manager&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;virt-viewer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost ~ ]$ sudo yum -y install libvirt qemu-img qemu-kvm virt-install  virt-manager virt-viewer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Start the libvirtd daemon:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost ~ ]$ sudo systemctl start libvirtd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enable the libvirtd daemon:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost ~ ]$ sudo systemctl enable libvirtd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Verify that libvirtd is running:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost ~ ]$ systemctl status libvirtd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see something similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;● libvirtd.service - Virtualization daemon
Loaded: loaded (/usr/lib/systemd/system/libvirtd.service; enabled; vendor preset: enabled)
Active: active (running) since Mon 2017-10-16 23:01:56 EDT; 1 weeks 3 days ago
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You have now installed the required virtualization packages for running a VM under KVM/QEMU.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Creating Your First VM&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By default, most configurations, images, networks and file systems for KVM/QEMU are stored in the /var/lib/libvirt directory. These also have the necessary SELinux contexts to ensure proper functioning. This guide will assume use of these directories.&lt;/p&gt;

&lt;p&gt;Download and obtain a CentOS or Fedora image. Ubuntu is currently not recommended using this procedure; there exists a bug in libvirt that causes some errors in installation.&lt;/p&gt;

&lt;p&gt;I. Installation within bash&lt;/p&gt;

&lt;p&gt;As previously discussed, virt-install is the default command-line installation utility for libvirt. There are number of options, flags and functions, but only a few are required.&lt;/p&gt;

&lt;p&gt;To install a VM type the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[user@localhost ~ ]$ sudo virt-install --name example_VM --vcpus 1 --memory 1024 --location /var/lib/libvirt/images/CentOS7.iso --disk path=/var/lib/libvirt/filesystems/example_VM.img,size=20 --network network=default&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt; is self-explanatory. This is how the VM will be identified to the hypervisor.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--vcpus&lt;/code&gt; refers to the number of virtual CPU threads given to the VM. To simplify, one vcpu equals one physical core, except for hyper-threaded CPUs. A four core physical CPU has four virtual CPUs to offer. A four core physical CPU with hyper-threading has 8 virtual CPUs to offer.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--memory&lt;/code&gt; is how much RAM is provisioned for the machine. The VM will see itself as having 1GB of RAM available.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--location&lt;/code&gt; refers to the physical location of the installation medium. This does not necessarily have to be ISO. A web server, FTP, or NFS server is also a valid source as well. If for some reason you receive an error during installation, the –cdrom option can be used in place of –location. Just make sure to still provide the path to the ISO.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--disk&lt;/code&gt; describes the installation location of the VM. This will automatically create a virtual hard drive in the path listed, with a size of 20GB.&lt;/p&gt;

&lt;p&gt;–network Networking in virtualized environments can rapidly become complex and confusing. By default, libvirt creates a virtual switch/bridge for your VMs, both for you host to connect to them, and to give networking to the VM. The default network name is default and assigns IP addresses in the 192.168.122.0/24 subnet.&lt;/p&gt;

&lt;p&gt;Connections to and from your VM are automatically NATed through the hosts physical network adapter. By default, libvirt configures iptables to drop all incoming connections to your VMs through the NAT; that were not previously established by the VM itself.&lt;/p&gt;

&lt;p&gt;After running the virt-install command, if everything went well, you should see something similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting install...
Retrieving file vmlinuz...
Retrieving file initrd.img...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The virt-viewer window should pop up and you will see your system begin to boot. At this point, the OS can be installed like any other bare-metal system.&lt;/p&gt;</content><author><name></name></author><summary type="html">Installation and creation of a VM</summary></entry><entry><title type="html">Intro to KVM/QEMU and libvirt - Part 1</title><link href="/linux/virtualization/2017/10/11/kvm-qemu-intro-pt1.html" rel="alternate" type="text/html" title="Intro to KVM/QEMU and libvirt - Part 1" /><published>2017-10-11T00:00:00-06:00</published><updated>2017-10-11T00:00:00-06:00</updated><id>/linux/virtualization/2017/10/11/kvm-qemu-intro-pt1</id><content type="html" xml:base="/linux/virtualization/2017/10/11/kvm-qemu-intro-pt1.html">&lt;h2 id=&quot;an-overview&quot;&gt;An Overview&lt;/h2&gt;
&lt;p&gt;This intro assumes the reader is using a Red Hat Enterprise Linux 7.3+ or Centos 7.3+ host.&lt;/p&gt;

&lt;p&gt;KVM, Qemu and libvirt constitute a series of packages and a kernel module that enable a Linux host to act as a hypervisor, using the virtualization extensions in the x86 CPU architecture.&lt;/p&gt;

&lt;p&gt;KVM is the kernel module that exposes the /dev/kvm interface. This allows hardware level access for the VM (Virtual Machine), allowing the VM to run at much faster speeds versus software only emulation.&lt;/p&gt;

&lt;p&gt;QEMU is the userspace portion of the hypervisor; that presents virtual hardware to the VM which is in turn accelerated by the KVM module. These include disks, network adapters, CD/DVD drives and the like.&lt;/p&gt;

&lt;p&gt;libvirt[sic] is the userspace API and daemon that provides advanced management tools and features, including VM provisioning, disk management, snapshots and network control.&lt;/p&gt;

&lt;p&gt;libvirt comprises several utilities:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libvirtd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The daemon that manages the virtualization platform.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;virt-manager&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The GUI tool for creating and managing VMs.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;virsh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The virtual shell, that connects to a libvirtd session. Virsh can also connect to other hypervisors, including Xen and ESXi, though this is beyond the scope of this discussion.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;virt-install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The shell utility for installing virtual machines. Includes automatic provisioning of disks, and network interfaces and can boot a VM over FTP, HTTP or NFS.&lt;/p&gt;

&lt;p&gt;In most common virtualization scenarios, all three of these are used, though some organizations do not. For example, Google Cloud makes heavy use of KVM, but uses their own userspace hypervisor in place of QEMU.
Summary:&lt;/p&gt;

&lt;p&gt;Linux virtualization consists of three modules, KVM, QEMU and libvirt. KVM exposes the hardware for virtualization, QEMU enables hardware acceleration and libvirt provides VM management features.&lt;/p&gt;

&lt;p&gt;Installation of VMs is accomplished either graphically or via shell with the &lt;code class=&quot;highlighter-rouge&quot;&gt;virt-manager&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;virt-install&lt;/code&gt; tools, respectively.&lt;/p&gt;

&lt;p&gt;The next post will focus on installation of the QEMU and libvirtd packages and creation of a VM.&lt;/p&gt;</content><author><name></name></author><summary type="html">An Overview This intro assumes the reader is using a Red Hat Enterprise Linux 7.3+ or Centos 7.3+ host. KVM, Qemu and libvirt constitute a series of packages and a kernel module that enable a Linux host to act as a hypervisor, using the virtualization extensions in the x86 CPU architecture.</summary></entry></feed>